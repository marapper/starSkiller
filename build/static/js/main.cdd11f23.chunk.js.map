{"version":3,"sources":["ProgressBar.jsx","GroupList.jsx","App.jsx","Header.jsx","serviceWorker.js","index.js"],"names":["emojiList","getHash","str","i","hash","length","charCodeAt","ProgressBar","value","skillName","onProgressClick","onInputChange","idSkill","Math","random","toString","substr","className","max","onClick","type","id","checked","onChange","htmlFor","GroupList","obj","onPointChange","onLearnChange","Object","keys","map","cur","key","App","console","log","skillValue","JSON","parse","stringify","competence","array","item","useState","currentSkillValue","setSkillValue","groupName","Header","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qleAGMA,G,WAAW,CAAC,SAAI,SAAI,iBAEpBC,EAAS,SAACC,GACZ,IAAcC,EAAVC,EAAO,EACX,GAAmB,IAAfF,EAAIG,OACJ,IAAKF,EAAI,EAAGA,EAAID,EAAIG,OAAQF,IAExBC,GAAUA,GAAQ,GAAKA,EADfF,EAAII,WAAWH,GAEvBC,GAAQ,EAGhB,OAAOA,GAyBIG,MArBf,YAAyE,IAAlDC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,gBAAgBC,EAAe,EAAfA,cACjDC,EAfgB,IAAMX,EAeNQ,GAfqBI,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,IAgB9E,OACI,yBAAKC,UAAY,eACb,8BAAUC,IAAI,IAAIC,QAAWT,EAAiBF,MAASA,EAAM,KAE7D,8BAAOR,EAAUQ,EAAM,KACX,IAAXA,EAAM,IACH,oCACI,2BAAOY,KAAK,WAAWC,GAAIT,EAASU,QAAoB,IAAXd,EAAM,GAAQA,MAAM,IAAIe,SAAYZ,IACjF,2BAAOa,QAASZ,GAAhB,0ECCHa,MAzBjB,YAAyD,IAApCC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,cAAcC,EAAgB,EAAhBA,cAEpC,OACE,wBAAIX,UAAU,cACTY,OAAOC,KAAKJ,GAAKK,KAAI,SAAAC,GACpB,OACE,wBAAIC,IAAKD,GACP,4BAAKA,GACL,wBAAIf,UAAU,gBACXY,OAAOC,KAAKJ,EAAIM,GAAJ,QAAoBD,KAAK,SAAAE,GACpC,OAAQ,wBAAIA,IAAKA,GAAK,8BAAOA,GACnB,kBAAC,EAAD,CAAazB,MAAOkB,EAAIM,GAAJ,OAAmBC,GAAMxB,UAAYwB,EACvDvB,gBAAiB,kBAAKiB,EAAcK,EAAIC,IACxCtB,cAAgB,kBAAKiB,EAAcI,EAAIC,iB,OCwBxDC,MAlCf,WACAC,QAAQC,IAAI,YAEV,IAAMC,EAAYC,KAAKC,MAAMD,KAAKE,UAAUC,IAH/B,WAIJR,GACP,IAAMS,EAAQL,EAAWJ,GAAX,OACdI,EAAWJ,GAAX,OAA0B,GAE1BS,EAAMX,KAAI,SAACY,GAAD,OAASN,EAAWJ,GAAX,OAA0BU,GAAM,CAAC,EAAE,OAJxD,IAAK,IAAIV,KAAOI,EAAY,EAAnBJ,GAJI,MAU8BW,mBAASP,GAVvC,mBAUNQ,EAVM,KAUaC,EAVb,KAyBb,OACE,6BACE,kBAAC,EAAD,CAAWpB,IAAMmB,EAAmBlB,cAdxC,SAAsBoB,EAAUtC,GAC9B,IAAMiB,EAAG,eAAOmB,GAChBnB,EAAIqB,GAAJ,OAAyBtC,GAAW,IAAIiB,EAAIqB,GAAJ,OAAyBtC,GAAW,GAAG,GAAG,EACtC,IAAzCiB,EAAIqB,GAAJ,OAAyBtC,GAAW,KAASiB,EAAIqB,GAAJ,OAAyBtC,GAAW,GAAG,GACvFqC,EAAcpB,IAUsDE,cARtE,SAAqBmB,EAAUtC,GAC7B,IAAMiB,EAAG,eAAOmB,GAChBnB,EAAIqB,GAAJ,OAAyBtC,GAAW,IAAIiB,EAAIqB,GAAJ,OAAyBtC,GAAW,GAAG,GAAG,EAClFqC,EAAcpB,Q,MCVHsB,MATf,WACI,OACI,gCACI,iCCDQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.cdd11f23.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nconst emojiList =[\"‚ö™\",\"‚≠ê\",\"üåû\"];\r\nconst getId =  (str)=>  '_' + getHash(str) + Math.random().toString(36).substr(2, 16);\r\nconst getHash= (str) =>{\r\n    var hash = 0, i, chr;\r\n    if (str.length !== 0) {\r\n        for (i = 0; i < str.length; i++) {\r\n            chr   = str.charCodeAt(i);\r\n            hash  = ((hash << 5) - hash) + chr;\r\n            hash |= 0; // Convert to 32bit integer\r\n        }\r\n    }\r\n    return hash;\r\n  };\r\n\r\n\r\nfunction ProgressBar ({value, skillName, onProgressClick,onInputChange}){\r\n    let idSkill = getId(skillName);\r\n    return(\r\n        <div className = \"progressBar\">\r\n            <progress max=\"2\" onClick = {onProgressClick} value = {value[0]}>\r\n            </progress>\r\n            <span>{emojiList[value[0]]}</span>\r\n            {value[0]!==2 && (\r\n                <>\r\n                    <input type=\"checkbox\" id={idSkill} checked={value[1]===1} value=\"1\" onChange = {onInputChange}/>\r\n                    <label htmlFor={idSkill}>\r\n                        –•–æ—á—É –∏–∑—É—á–∏—Ç—å\r\n                    </label>\r\n                </>\r\n            )}\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\n \r\nexport default ProgressBar;","import React from 'react';\r\nimport './App.css';\r\nimport ProgressBar from './ProgressBar.jsx';\r\n\r\nfunction GroupList ({obj, onPointChange,onLearnChange}) {\r\n\r\n    return (\r\n      <ul className=\"skillGroup\">\r\n          {Object.keys(obj).map(cur => {\r\n            return (\r\n              <li key={cur}>\r\n                <h2>{cur}</h2>\r\n                <ul className=\"skillElement\">\r\n                  {Object.keys(obj[cur][\"skills\"]).map( key=>{\r\n                    return (<li key={key}><span>{key}</span>\r\n                              <ProgressBar value={obj[cur][\"skills\"][key]} skillName ={key} \r\n                                onProgressClick={()=> onPointChange(cur,key)} \r\n                                onInputChange ={()=> onLearnChange(cur,key)}\r\n                              ></ProgressBar>\r\n                           </li>)\r\n                  })}\r\n                </ul>\r\n              </li>\r\n            );\r\n          })}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  export default GroupList;","import React,{useState} from 'react';\r\nimport './App.css';\r\nimport './progress-bar.css';\r\n\r\nimport GroupList from './GroupList.jsx';\r\nimport competence from './competence.json';\r\n\r\nfunction App() {\r\nconsole.log('rerender');\r\n\r\n  const skillValue =JSON.parse(JSON.stringify(competence));\r\n  for (let key in skillValue){\r\n    const array = skillValue[key][\"skills\"];\r\n    skillValue[key][\"skills\"]={};\r\n    \r\n    array.map((item)=> skillValue[key][\"skills\"][item]=[0,0]);\r\n  };\r\n  const [currentSkillValue, setSkillValue] = useState(skillValue);\r\n\r\n  \r\n  function handlePoints(groupName,skillName){\r\n    const obj = {...currentSkillValue};\r\n    obj[groupName][\"skills\"][skillName][0]=(obj[groupName][\"skills\"][skillName][0]+1)%3;\r\n    if(obj[groupName][\"skills\"][skillName][0]===2){ obj[groupName][\"skills\"][skillName][1]=0};\r\n    setSkillValue(obj);\r\n  }\r\n  function handleLearn(groupName,skillName){\r\n    const obj = {...currentSkillValue};\r\n    obj[groupName][\"skills\"][skillName][1]=(obj[groupName][\"skills\"][skillName][1]+1)%2;\r\n    setSkillValue(obj);\r\n  }\r\n\r\n  return (\r\n    <div >\r\n      <GroupList obj ={currentSkillValue} onPointChange ={handlePoints} onLearnChange={handleLearn}/>     \r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './Header.css';\r\nfunction FilterElement(roleName, onClick){\r\n    return(\r\n        <div className=\"filterElem\">\r\n            <a onClick={onClick}>{roleName}</a>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Header (){\r\n    return(\r\n        <header>\r\n            <menu></menu>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport Header from './Header.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Header/>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}